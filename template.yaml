AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  AWS

  Sample SAM Template for AWS

Metadata:
  AWS::ServerlessRepo::Application:
    Name: NvaDoiRequestsApi
    Description: NVA Doi Requests API
    Author: Unit
    SpdxLicenseId: MIT
    LicenseUrl: LICENSE
    Labels: ['${GIT_REPO}', '${CODEBUILD_RESOLVED_SOURCE_VERSION}', '@${BUILD_TIMESTAMP}']

Globals:
  Function:
    Timeout: 20
  Api:
    Cors:
      AllowMethods: "'POST, PUT, GET,OPTIONS'"
      AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
      AllowOrigin: "'*'"

Parameters:
  HttpScheme:
    Type: String
    Description: http or https
    Default: https
  CognitoAuthorizerArn:
    Type: String
    Description: Reference to Cognito UserPool for the stage
  CustomDomain:
    Type: String
    Description: Custom API to connect this lambda to
  CustomDomainBasePath:
    Type: String
    Description: Base path mapping in CustomDomain
  DoiRequestsTableName:
    Type: String
    Description: Reference to table for DOI Requests
  DoiRequestsIndexName:
    Type: String
    Description: Reference to index for DOI Requests
Resources:
  NvaDoiRequestsApi:
    Type: AWS::Serverless::Api
    Properties:
      StageName: Prod
      EndpointConfiguration: REGIONAL
      DefinitionBody:
        openapi: 3.0.3
        info:
          title: NVA DOI Requests API
          description: NVA DOI Requests
          version: '1.0'
        paths:
          /:
            get:
              summary: Find DOI Requests By Role
              security:
                - CognitoUserPool: [ ]
              parameters:
                - in: query
                  name: role
                  description: The role used to find DOI requests for.
                  schema:
                    type: string
              responses:
                '200':
                  description: OK
                  content:
                    application/json:
                      schema:
                        type: array
                        items:
                          $ref: '#/components/schemas/Publication'
                '400':
                  description: Bad Request
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
                '404':
                  description: Not Found
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
                '502':
                  description: Bad Gateway
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaFindDoiRequestsFunction.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
            post:
              summary: Create new Doi request
              security:
                - CognitoUserPool: [ ]
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/CreateDoiRequest'
              responses:
                '201':
                  description: Created
                  # no body for post. Client will see all messages when they request the details for the DoiRequest
                '400':
                  description: Bad Request
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
                '404':
                  description: Not Found
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
              x-amazon-apigateway-integration:
                uri:
                  Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaCreateDoiRequestHandler.Arn}/invocations
                responses: { }
                httpMethod: POST
                type: AWS_PROXY
          '/update-doi-request/{publicationIdentifier}':
            post:
              summary: Initiate a Update DOI Request process
              security:
                - CognitoUserPool: []
              parameters:
                - in: path
                  name: publicationIdentifier
                  description: Publication Id (uuid)
                  required: true
                  schema:
                    type: string
                    format: uuid
              requestBody:
                content:
                  application/json:
                    schema:
                      $ref: '#/components/schemas/UpdateDoiRequest'
              responses:
                '202':
                  description: Accepted
                '400':
                  description: Bad Request
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
                '401':
                  description: Not authenticated
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
                '403':
                  description: Not authorized
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
                '404':
                  description: Not Found
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
                '502':
                  description: Bad Gateway
                  content:
                    application/json:
                      schema:
                        $ref: '#/components/schemas/Problem'
              x-amazon-apigateway-integration:
                uri:
                  'Fn::Sub': >-
                    arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${NvaUpdateDoiRequestHandler.Arn}/invocations
                responses: {}
                httpMethod: POST
                type: AWS_PROXY

        components:
          schemas:
            Publication:
              type: object
              properties:
                doiRequestStatus:
                  type: string
                doiRequestDate:
                  type: string
                  format: date-time
                publicationIdentifier:
                  type: string
                  format: uuid
                publicationTitle:
                  type: string
                publicationCreator:
                  type: string
            CreateDoiRequest:
              type: object
              properties:
                publicationId:
                  type: string
                message:
                  type: string
            Problem:
              type: object
              properties:
                title:
                  type: string
                status:
                  type: integer
                detail:
                  type: string
            UpdateDoiRequest:
              type: object
              properties:
                doiRequestStatus:
                  $ref: '#/components/schemas/DoiRequestStatus'
              description: Initiate a Update DOI request process
            DoiRequestStatus:
              description: Enum values for valid doiRequestStatus
              type: string
              enum:
                - REQUESTED
                - APPROVED
                - REJECTED
          securitySchemes:
            CognitoUserPool:
              type: apiKey
              name: Authorization
              in: header
              x-amazon-apigateway-authtype: cognito_user_pools
              x-amazon-apigateway-authorizer:
                type: cognito_user_pools
                providerARNs:
                  - !Ref CognitoAuthorizerArn

  AssumedRole:
    DependsOn: LambdaRole
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaRole.Arn
            Action:
              - sts:AssumeRole
          - Effect: Allow
            Principal:
              AWS: !GetAtt LambdaRole.Arn
            Action:
              - sts:TagSession
      Path: /
      Policies:
        - PolicyName: CuratorReadAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - sts:AssumeRole
                  - sts:TagSession
                Resource:
                  - !Join [ "",[ "arn:aws:dynamodb",":",!Ref AWS::Region,":",!Ref AWS::AccountId,":","table/",!Ref DoiRequestsTableName ] ]
                  - !Join [ "",[ "arn:aws:dynamodb",":",!Ref AWS::Region,":",!Ref AWS::AccountId,":","table/",!Ref DoiRequestsTableName,"/index/",!Ref DoiRequestsIndexName ] ]
                Condition:
                  StringEquals:
                    "aws:PrincipalTag/approve_doi_request": "APPROVE_DOI_REQUEST"
        - PolicyName: CuratorWriteAccess
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                  - sts:AssumeRole
                  - sts:TagSession
                Resource:
                  - !Join [ "",[ "arn:aws:dynamodb",":",!Ref AWS::Region,":",!Ref AWS::AccountId,":","table/",!Ref DoiRequestsTableName ] ]
                  - !Join [ "",[ "arn:aws:dynamodb",":",!Ref AWS::Region,":",!Ref AWS::AccountId,":","table/",!Ref DoiRequestsTableName,"/index/",!Ref DoiRequestsIndexName ] ]
                Condition:
                  StringEquals:
                    "aws:PrincipalTag/approve_doi_request": "APPROVE_DOI_REQUEST"
                  "ForAllValues:StringEquals":
                    "dynamodb:Attributes":
                      - doiRequest



  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaDefaults
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sts:AssumeRole
                  - sts:TagSession
                Resource: "*"
  AdminRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: lambda.amazonaws.com
            Action: sts:AssumeRole
      Path: /
      Policies:
        - PolicyName: LambdaDefaults
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                  - sts:AssumeRole
                  - sts:TagSession
                  - dynamodb:GetItem
                  - dynamodb:PutItem
                  - dynamodb:UpdateItem
                  - dynamodb:Scan
                  - dynamodb:Query
                  - dynamodb:BatchGetItem
                  - dynamodb:DescribeTable
                Resource: "*"
  NvaFindDoiRequestsFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: find-doi-requests
      Handler: no.unit.nva.doi.requests.FindDoiRequestsHandler::handleRequest
      Runtime: java11
      MemorySize: 1400
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref DoiRequestsTableName
          INDEX_NAME: !Ref DoiRequestsIndexName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DoiRequestsTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: get
            RestApiId: !Ref NvaDoiRequestsApi

  NvaCreateDoiRequestHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: create-doi-request
      Handler: no.unit.nva.doi.requests.handlers.CreateDoiRequestHandler::handleRequest
      Runtime: java11
      MemorySize: 1400
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref DoiRequestsTableName
          INDEX_NAME: !Ref DoiRequestsIndexName
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref DoiRequestsTableName
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /
            Method: post
            RestApiId: !Ref NvaDoiRequestsApi

  NvaUpdateDoiRequestHandler:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: update-doi-request
      Handler: no.unit.nva.doi.requests.handlers.UpdateDoiRequestHandler::handleRequest
      Runtime: java11
      MemorySize: 1400
      Environment:
        Variables:
          ALLOWED_ORIGIN: '*'
          TABLE_NAME: !Ref DoiRequestsTableName
          INDEX_NAME: !Ref DoiRequestsIndexName
          ASSUMED_ROLE_ARN: !GetAtt AssumedRole.Arn
          API_HOST: !Ref CustomDomain
          API_SCHEME: !Ref HttpScheme
      Role: !GetAtt LambdaRole.Arn
      Events:
        GetEvent:
          Type: Api
          Properties:
            Path: /{publicationIdentifier}
            Method: post
            RestApiId: !Ref NvaDoiRequestsApi
  NvaDoiRequestsPathMapping:
    Type: AWS::ApiGateway::BasePathMapping
    Properties:
      BasePath: !Ref CustomDomainBasePath
      DomainName: !Ref CustomDomain
      RestApiId: !Ref NvaDoiRequestsApi
      Stage: !Ref NvaDoiRequestsApi.Stage
  GatewayResponseDefault4XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
      ResponseType: DEFAULT_4XX
      RestApiId: !Ref NvaDoiRequestsApi
  GatewayResponseDefault5XX:
    Type: AWS::ApiGateway::GatewayResponse
    Properties:
      ResponseParameters:
        gatewayresponse.header.Access-Control-Allow-Origin: "'*'"
        gatewayresponse.header.Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent'"
      ResponseType: DEFAULT_5XX
      RestApiId: !Ref NvaDoiRequestsApi
